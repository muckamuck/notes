{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "ECS Experiment",
    "Parameters": {
        "clusterName": {
            "Default": "cf-cluster-one",
            "Description": "Name of the cluster we are creating",
            "Type": "String"
        },
        "ecsAMI": {
            "Description": "AMI for the instance",
            "Type": "String"
        },
        "ecsInstanceProfile": {
            "Description": "IAM profile for the instance",
            "Type": "String"
        },
        "ec2Key": {
            "Description": "Key for the ECS host",
            "Type": "String"
        },
        "instanceType": {
            "Description": "Instance type  for the ECS host",
            "Type": "String"
        },
        "machineName": {
            "Description": "Name for the ECS host",
            "Type": "String"
        },
        "extra": {
            "Default": "42",
            "Description": "Extra bits",
            "Type": "String"
        }
    },
    "Resources": {
        "ECSCluster":{
            "Type":"AWS::ECS::Cluster",
            "Properties" : {
                "ClusterName" : { "Ref": "clusterName" }
            }
        },
        "ecsSecuityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Allow ECS connections",
                "GroupName" : "ecs-host",
                "VpcId" : {"Fn::ImportValue": "adminVPCV1"},
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "443",
                        "ToPort" : "443",
                        "CidrIp" : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "8080",
                        "ToPort" : "8080",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress" : [{
                    "IpProtocol" : "tcp",
                    "FromPort" : "1",
                    "ToPort" : "65535",
                    "CidrIp" : "0.0.0.0/0"
                }]
            }
        },
        "ecsHost" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "ImageId" : {"Ref": "ecsAMI"},
                "KeyName" : {"Ref": "ec2Key"},
                "SubnetId": {"Fn::ImportValue": "adminSubnetOneV1"},
                "SecurityGroupIds": [{"Ref": "ecsSecuityGroup"}],
                "IamInstanceProfile": {"Ref": "ecsInstanceProfile"},
                "InstanceType": {"Ref": "instanceType"},
                "Tags" : [{"Key" : "Name", "Value" : {"Ref": "machineName"}}],
                "UserData": {
                    "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash", "\n",
                    "echo ECS_CLUSTER=", { "Ref": "clusterName" }, " >> /etc/ecs/ecs.config", "\n"
                    ]]}
                }
            }
        },
        "ecsIPaddress": {
            "Type" : "AWS::EC2::EIP",
            "Properties" : {
                "Domain" : "vpc"
            }
        },
        "adminSSHaddressAssoc": {
            "Type": "AWS::EC2::EIPAssociation",
            "DependsOn": [
                "ecsHost",
                "ecsIPaddress"
            ],
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "ecsIPaddress",
                        "AllocationId"
                    ]
                },
                "InstanceId": {"Ref": "ecsHost"}
            }
        },
        "cloudwatchLogsGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [ "-", 
                        [ "ECSLogGroup", { "Ref":"AWS::StackName" } ]
                    ]
                },
            "RetentionInDays": 7
            }
        },
        "taskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Cpu": "10",
                        "Essential": "true",
                        "Image": "httpd:2.4",
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "cloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": "ecs-lab-app"
                            }
                        },
                        "Memory": "300",
                        "MountPoints": [
                            {
                                "ContainerPath": "/usr/local/apache2/htdocs",
                                "SourceVolume": "src-vol"
                            }
                        ],
                        "Name": "ecs-lab-app",
                        "PortMappings": [
                            {
                                "ContainerPort": 80
                            }
                        ]
                    }
                ],
                "Family": "ecs-lab-task",
                "Volumes": [
                    {
                        "Name": "src-vol"
                    }
                ]
            }
        },
        "ecsLabALB":{
            "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties":{
                "Name": "ecsLabALB",
                "Scheme":"internet-facing",
                "LoadBalancerAttributes": [
                    {
                        "Key":"idle_timeout.timeout_seconds",
                        "Value":"30"
                    }
                ],
                "Subnets": [ 
                    {"Fn::ImportValue": "adminSubnetOneV1"},
                    {"Fn::ImportValue": "adminSubnetTwoV1"}
                ],
                "SecurityGroups": [ { "Ref":"ecsSecuityGroup" } ]
            }
        },
        "ecsLabTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "DependsOn": "ecsLabALB",
            "Properties": {
                "HealthCheckIntervalSeconds": 10,
                "HealthCheckPath": "/",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Name": "ecsLabTargetGroup",
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {"Fn::ImportValue": "adminVPCV1"}
            }
        },
        "ecsServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [ "sts:AssumeRole" ],
                            "Effect": "Allow",
                            "Principal": { "Service": [ "ecs.amazonaws.com" ] }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                        "elasticloadbalancing:DeregisterTargets",
                                        "elasticloadbalancing:Describe*",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                        "elasticloadbalancing:RegisterTargets",
                                        "ec2:Describe*",
                                        "ec2:AuthorizeSecurityGroupIngress"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "ecs-service"
                    }
                ]
            }
        },
        "ecsLabALBListener":{
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions":[
                    {
                        "Type":"forward",
                        "TargetGroupArn": { "Ref": "ecsLabTargetGroup" }
                    }
                ],
                "LoadBalancerArn": { "Ref":"ecsLabALB" },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "labService":{
            "Type": "AWS::ECS::Service",
            "DependsOn": [
                "ecsLabALBListener",
                "ecsServiceRole"
            ],
            "Properties": {
                "TaskDefinition": { "Ref":"taskDefinition" },
                "Cluster": { "Ref": "ECSCluster" },
                "DesiredCount": "1",
                "LoadBalancers": [
                    {
                        "ContainerName": "ecs-lab-app",
                        "ContainerPort": "80",
                        "TargetGroupArn": {
                            "Ref": "ecsLabTargetGroup"
                        }
                    }
                ],
                "Role": { "Ref": "ecsServiceRole" }
            }
        }
    }
}
